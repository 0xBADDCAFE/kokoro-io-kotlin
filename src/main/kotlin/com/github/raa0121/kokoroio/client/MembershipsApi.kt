/**
* kokoro.io API document
* X-Access-Token ヘッダーにあなたのアカウントのAPIトークンを含めることでAPIへのアクセスを行うことが出来ます。APIトークンはウェブ管理画面の右上メニュー「アカウント情報 > API情報」から確認可能です。  ただし、 POST /api/v1/devices/ APIへのリクエスト時のみ、APIトークンではなくあなたのアカウント情報を用いて認証を行うことが出来ます。この場合、X-Access-TokenではなくX-Account-Token ヘッダーを使用し、その値にはアカウントのメールアドレスとパスワードをコロンで連結した文字列 \"[email]:[password]\" を Base64 エンコードしたものを指定してください。  また、このページ右上の「Your API token here」の欄にAPIトークンを入力し「Explore」ボタンをクリックすることで、このページの各API説明部分にある「Try it out!」ボタンから実際にAPIを呼び出すことが可能になります。この時、通常のAPI呼び出しと同様、アカウントへの操作が実際に行われますのでご注意ください。 
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package com.github.raa0121.kokoroio.client

import com.github.raa0121.kokoroio.model.MembershipEntity

import io.swagger.client.infrastructure.*

class MembershipsApi(basePath: kotlin.String = "https://kokoro.io/api") : ApiClient(basePath) {

    /**
    * 
    * Delete a membership.
    * @param id  
    * @return MembershipEntity
    */
    @Suppress("UNCHECKED_CAST")
    fun deleteV1MembershipsId(id: kotlin.String) : MembershipEntity {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/v1/memberships/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MembershipEntity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MembershipEntity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Returns user&#39;s memberships.
    * @param archived  (optional)
    * @param authority  (optional)
    * @return MembershipEntity
    */
    @Suppress("UNCHECKED_CAST")
    fun getV1Memberships(archived: kotlin.Boolean, authority: kotlin.String) : MembershipEntity {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf("archived" to listOf("$archived"), "authority" to listOf("$authority"))
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/v1/memberships",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MembershipEntity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MembershipEntity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Creates a new membership.
    * @param channelId  
    * @param notificationPolicy  (optional)
    * @param readStateTrackingPolicy  (optional)
    * @param visible  (optional)
    * @param muted  (optional)
    * @return MembershipEntity
    */
    @Suppress("UNCHECKED_CAST")
    fun postV1Memberships(channelId: kotlin.String, notificationPolicy: kotlin.String, readStateTrackingPolicy: kotlin.String, visible: kotlin.Boolean, muted: kotlin.Boolean) : MembershipEntity {
        val localVariableBody: kotlin.Any? = mapOf("channel_id" to "$channelId", "notification_policy" to "$notificationPolicy", "read_state_tracking_policy" to "$readStateTrackingPolicy", "visible" to "$visible", "muted" to "$muted")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/memberships",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MembershipEntity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MembershipEntity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Updates a membership.
    * @param id  
    * @param notificationPolicy  (optional)
    * @param readStateTrackingPolicy  (optional)
    * @param visible  (optional)
    * @param muted  (optional)
    * @param latestReadMessageId  (optional)
    * @return MembershipEntity
    */
    @Suppress("UNCHECKED_CAST")
    fun putV1MembershipsId(id: kotlin.String, notificationPolicy: kotlin.String, readStateTrackingPolicy: kotlin.String, visible: kotlin.Boolean, muted: kotlin.Boolean, latestReadMessageId: kotlin.Int) : MembershipEntity {
        val localVariableBody: kotlin.Any? = mapOf("notification_policy" to "$notificationPolicy", "read_state_tracking_policy" to "$readStateTrackingPolicy", "visible" to "$visible", "muted" to "$muted", "latest_read_message_id" to "$latestReadMessageId")
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/v1/memberships/{id}".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MembershipEntity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MembershipEntity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * 
    * Join to invited room
    * @param id  
    * @return MembershipEntity
    */
    @Suppress("UNCHECKED_CAST")
    fun putV1MembershipsIdJoin(id: kotlin.String) : MembershipEntity {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/v1/memberships/{id}/join".replace("{"+"id"+"}", "$id"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<MembershipEntity>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as MembershipEntity
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
